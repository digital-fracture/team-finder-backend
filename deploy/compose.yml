services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entryPoints.websecure.address=:443
      - --entryPoints.websecure.http.tls=true
      - --providers.file.filename=/traefik/dynamic.yml
      - --providers.file.watch=true
    ports:
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./traefik.yml:/traefik/dynamic.yml:ro
    networks:
      - team-finder-network
    restart: always

  team-finder-backend:
    build:
      context: ../
      dockerfile: deploy/Dockerfile
    env_file:
      - .env
    scale: 2
    labels:
      - traefik.enable=true
      - traefik.http.routers.team-finder-backend.rule=Host(`${API_HOST}`)
      - traefik.http.routers.team-finder-backend.entryPoints=websecure
    depends_on:
      team-finder-database:
        condition: service_healthy
    volumes:
      - ../keys:/app/keys
    networks:
      - team-finder-network
    restart: always

  team-finder-database:
    image: postgres:16-alpine
    container_name: ${POSTGRES_HOST}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - team-finder-database:/var/lib/postgresql/data
    networks:
      - team-finder-network
    restart: always

volumes:
  team-finder-database:

networks:
  team-finder-network:
